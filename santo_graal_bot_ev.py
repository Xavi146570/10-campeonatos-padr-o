"""
Santo Graal Bot EV+ - Sistema de Detec√ß√£o de Expected Value
Vers√£o com HTTP endpoint para Render Web Service (gratuito)
CORRE√á√ÉO: Telegram MarkdownV2 escape perfeito

Monitora jogos 0-0 no HT e calcula probabilidades/EV para Over 0.5 e Over 1.5 FT
"""

import os
import sys
import time
import requests
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Tuple
from dotenv import load_dotenv

# Imports para HTTP endpoint (Render Web Service)
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

# Imports locais
from config_santo_graal import Config
from probability_calculator_santo_graal import ProbabilityCalculator
from ev_detector_santo_graal import EVDetector

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# ============================================================
# HTTP Health Check para Render Web Service
# ============================================================

class HealthCheckHandler(BaseHTTPRequestHandler):
    """Handler para health check - mant√©m Render Web Service ativo"""
    
    def do_GET(self):
        """Responde a requisi√ß√µes GET com status do bot"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Santo Graal Bot EV+</title>
            <meta charset="UTF-8">
            <style>
                body { 
                    font-family: 'Segoe UI', Arial, sans-serif;
                    text-align: center; 
                    padding: 50px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    margin: 0;
                }
                .container {
                    background: rgba(255,255,255,0.15);
                    backdrop-filter: blur(10px);
                    padding: 40px;
                    border-radius: 20px;
                    display: inline-block;
                    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                }
                h1 { margin: 0 0 20px 0; font-size: 2.5em; }
                .status { 
                    font-size: 1.2em; 
                    margin: 15px 0;
                    padding: 10px;
                    background: rgba(255,255,255,0.1);
                    border-radius: 10px;
                }
                .emoji { font-size: 3em; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="emoji">ü§ñ‚öΩ</div>
                <h1>Santo Graal Bot EV+</h1>
                <div class="status">‚úÖ Bot est√° ONLINE e funcionando!</div>
                <div class="status">üîÑ Monitorando jogos 24/7</div>
                <div class="status">üìä Detectando oportunidades EV+</div>
            </div>
        </body>
        </html>
        """
        self.wfile.write(html.encode('utf-8'))
    
    def log_message(self, format, *args):
        """Silenciar logs HTTP para n√£o poluir console"""
        pass


def run_health_check_server():
    """Inicia servidor HTTP na porta especificada (10000 no Render)"""
    port = int(os.getenv('PORT', 10000))
    try:
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        logger.info(f"üåê Servidor HTTP iniciado na porta {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servidor HTTP: {e}")


# ============================================================
# Fun√ß√µes Auxiliares
# ============================================================

def send_telegram_notification(message: str) -> bool:
    """
    Envia notifica√ß√£o via Telegram
    
    Args:
        message: Mensagem a enviar (suporta Markdown)
    
    Returns:
        True se enviado com sucesso, False caso contr√°rio
    """
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not token or not chat_id:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN ou TELEGRAM_CHAT_ID n√£o configurados")
            return False
        
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'MarkdownV2',
            'disable_web_page_preview': True
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            return True
        else:
            logger.error(f"‚ùå Erro ao enviar Telegram: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Exce√ß√£o ao enviar Telegram: {e}")
        return False


# ============================================================
# Classe Principal do Bot
# ============================================================

class SantoGraalBot:
    """Bot principal que monitora jogos e detecta oportunidades EV+"""
    
    def __init__(self):
        """Inicializa o bot"""
        self.api_key = os.getenv('API_FOOTBALL_KEY')
        
        if not self.api_key:
            raise ValueError("‚ùå API_FOOTBALL_KEY n√£o encontrada no .env")
        
        self.base_url = "https://v3.football.api-sports.io"
        self.headers = {
            'x-apisports-key': self.api_key
        }
        
        self.probability_calculator = ProbabilityCalculator()
        self.ev_detector = EVDetector()
        
        # Cache para evitar notifica√ß√µes duplicadas
        self.notified_fixtures = set()
        
        logger.info("Santo Graal Bot EV+ inicializado")
    
    def get_upcoming_fixtures(self, hours_ahead: int = 24) -> List[Dict]:
        """
        Busca jogos pr√≥ximos nas ligas configuradas
        
        Args:
            hours_ahead: Quantas horas √† frente buscar
        
        Returns:
            Lista de fixtures
        """
        fixtures = []
        
        now = datetime.now(timezone.utc)
        date_from = now.strftime('%Y-%m-%d')
        date_to = (now + timedelta(hours=hours_ahead)).strftime('%Y-%m-%d')
        
        for league_id in Config.LEAGUES:
            try:
                url = f"{self.base_url}/fixtures"
                params = {
                    'league': league_id,
                    'season': Config.SEASON,
                    'from': date_from,
                    'to': date_to
                }
                
                response = requests.get(url, headers=self.headers, params=params, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('response'):
                        fixtures.extend(data['response'])
                else:
                    logger.warning(f"‚ö†Ô∏è Erro ao buscar fixtures da liga {league_id}: {response.status_code}")
                
                time.sleep(0.5)  # Rate limiting
                
            except Exception as e:
                logger.error(f"‚ùå Exce√ß√£o ao buscar fixtures da liga {league_id}: {e}")
        
        return fixtures
    
    def get_live_fixtures(self) -> List[Dict]:
        """
        Busca jogos ao vivo nas ligas configuradas
        
        Returns:
            Lista de fixtures ao vivo
        """
        fixtures = []
        
        for league_id in Config.get_active_leagues():
            try:
                url = f"{self.base_url}/fixtures"
                params = {
                    'league': league_id,
                    'live': 'all'
                }
                
                response = requests.get(url, headers=self.headers, params=params, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('response'):
                        fixtures.extend(data['response'])
                else:
                    logger.warning(f"‚ö†Ô∏è Erro ao buscar live fixtures da liga {league_id}: {response.status_code}")
                
                time.sleep(0.5)  # Rate limiting
                
            except Exception as e:
                logger.error(f"‚ùå Exce√ß√£o ao buscar live fixtures da liga {league_id}: {e}")
        
        return fixtures
    
    def get_fixture_statistics(self, fixture_id: int) -> Optional[Dict]:
        """
        Busca estat√≠sticas de um jogo espec√≠fico
        
        Args:
            fixture_id: ID do jogo
        
        Returns:
            Dicion√°rio com estat√≠sticas ou None
        """
        try:
            url = f"{self.base_url}/fixtures/statistics"
            params = {'fixture': fixture_id}
            
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('response'):
                    return data['response']
            else:
                logger.warning(f"‚ö†Ô∏è Erro ao buscar estat√≠sticas do jogo {fixture_id}: {response.status_code}")
            
        except Exception as e:
            logger.error(f"‚ùå Exce√ß√£o ao buscar estat√≠sticas do jogo {fixture_id}: {e}")
        
        return None
    
    def get_team_statistics(self, team_id: int, league_id: int) -> Optional[Dict]:
        """
        Busca estat√≠sticas de um time na temporada
        
        Args:
            team_id: ID do time
            league_id: ID da liga
        
        Returns:
            Dicion√°rio com estat√≠sticas ou None
        """
        try:
            url = f"{self.base_url}/teams/statistics"
            params = {
                'team': team_id,
                'league': league_id,
                'season': Config.SEASON
            }
            
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('response'):
                    return data['response']
            else:
                logger.warning(f"‚ö†Ô∏è Erro ao buscar estat√≠sticas do time {team_id}: {response.status_code}")
            
        except Exception as e:
            logger.error(f"‚ùå Exce√ß√£o ao buscar estat√≠sticas do time {team_id}: {e}")
        
        return None
    
    def get_h2h(self, team1_id: int, team2_id: int, last_n: int = 10) -> List[Dict]:
        """
        Busca hist√≥rico de confrontos diretos
        
        Args:
            team1_id: ID do primeiro time
            team2_id: ID do segundo time
            last_n: N√∫mero de jogos a buscar
        
        Returns:
            Lista de confrontos
        """
        try:
            url = f"{self.base_url}/fixtures/headtohead"
            params = {
                'h2h': f"{team1_id}-{team2_id}",
                'last': last_n
            }
            
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('response'):
                    return data['response']
            else:
                logger.warning(f"‚ö†Ô∏è Erro ao buscar H2H {team1_id}-{team2_id}: {response.status_code}")
            
        except Exception as e:
            logger.error(f"‚ùå Exce√ß√£o ao buscar H2H {team1_id}-{team2_id}: {e}")
        
        return []
    
    def get_odds(self, fixture_id: int) -> Optional[Dict]:
        """
        Busca odds de um jogo espec√≠fico
        
        Args:
            fixture_id: ID do jogo
        
        Returns:
            Dicion√°rio com odds ou None
        """
        try:
            url = f"{self.base_url}/odds"
            params = {
                'fixture': fixture_id,
                'bookmaker': Config.BOOKMAKER_ID
            }
            
            response = requests.get(url, headers=self.headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('response'):
                    return data['response'][0] if data['response'] else None
            else:
                logger.warning(f"‚ö†Ô∏è Erro ao buscar odds do jogo {fixture_id}: {response.status_code}")
            
        except Exception as e:
            logger.error(f"‚ùå Exce√ß√£o ao buscar odds do jogo {fixture_id}: {e}")
        
        return None
    
    def extract_over_odds(self, odds_data: Dict) -> Tuple[Optional[float], Optional[float]]:
        """
        Extrai odds de Over 0.5 e Over 1.5 dos dados da API
        
        Args:
            odds_data: Dados de odds da API
        
        Returns:
            Tuple (over_05_odds, over_15_odds)
        """
        over_05 = None
        over_15 = None
        
        if not odds_data or 'bookmakers' not in odds_data:
            return over_05, over_15
        
        try:
            bookmakers = odds_data['bookmakers']
            
            for bookmaker in bookmakers:
                if 'bets' not in bookmaker:
                    continue
                
                for bet in bookmaker['bets']:
                    if bet['name'] == 'Goals Over/Under':
                        for value in bet['values']:
                            if value['value'] == 'Over 0.5':
                                over_05 = float(value['odd'])
                            elif value['value'] == 'Over 1.5':
                                over_15 = float(value['odd'])
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair odds: {e}")
        
        return over_05, over_15
    
    def check_0x0_draw_rate(self, team1_stats: Dict, team2_stats: Dict) -> bool:
        """
        Verifica se ambos os times t√™m taxa de empate 0-0 <= 15%
        
        Args:
            team1_stats: Estat√≠sticas do time 1
            team2_stats: Estat√≠sticas do time 2
        
        Returns:
            True se ambos atendem o crit√©rio
        """
        try:
            # Time 1
            fixtures1 = team1_stats.get('fixtures', {})
            draws1 = fixtures1.get('draws', {}).get('total', 0)
            total1 = fixtures1.get('played', {}).get('total', 0)
            
            if total1 == 0:
                return False
            
            draw_rate1 = (draws1 / total1) * 100
            
            # Time 2
            fixtures2 = team2_stats.get('fixtures', {})
            draws2 = fixtures2.get('draws', {}).get('total', 0)
            total2 = fixtures2.get('played', {}).get('total', 0)
            
            if total2 == 0:
                return False
            
            draw_rate2 = (draws2 / total2) * 100
            
            logger.info(f"üìä Taxa empate 0-0: Time1={draw_rate1:.1f}%, Time2={draw_rate2:.1f}%")
            
            return draw_rate1 <= Config.MAX_DRAW_RATE and draw_rate2 <= Config.MAX_DRAW_RATE
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar taxa de empate: {e}")
            return False
    
    def is_halftime_0x0(self, fixture: Dict) -> bool:
        """
        Verifica se o jogo est√° 0-0 no intervalo
        
        Args:
            fixture: Dados do jogo
        
        Returns:
            True se est√° 0-0 no HT
        """
        try:
            status = fixture.get('fixture', {}).get('status', {})
            short_status = status.get('short', '')
            
            # Verificar se est√° no intervalo
            if short_status != 'HT':
                return False
            
            # Verificar placar
            score = fixture.get('score', {})
            halftime = score.get('halftime', {})
            home = halftime.get('home')
            away = halftime.get('away')
            
            return home == 0 and away == 0
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar HT 0-0: {e}")
            return False
    
    def process_fixture(self, fixture: Dict):
        """
        Processa um jogo e detecta oportunidades EV+
        
        Args:
            fixture: Dados do jogo
        """
        try:
            fixture_id = fixture['fixture']['id']
            
            # Evitar processar m√∫ltiplas vezes
            if fixture_id in self.notified_fixtures:
                return
            
            home_team = fixture['teams']['home']
            away_team = fixture['teams']['away']
            league = fixture['league']
            
            logger.info(f"üîç Processando: {home_team['name']} vs {away_team['name']}")
            
            # Buscar estat√≠sticas dos times
            home_stats = self.get_team_statistics(home_team['id'], league['id'])
            away_stats = self.get_team_statistics(away_team['id'], league['id'])
            
            if not home_stats or not away_stats:
                logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter estat√≠sticas dos times")
                return
            
            # Verificar taxa de empate 0-0
            if not self.check_0x0_draw_rate(home_stats, away_stats):
                logger.info("‚ùå Times n√£o atendem crit√©rio de taxa de empate 0-0")
                return
            
            # Buscar H2H
            h2h_matches = self.get_h2h(home_team['id'], away_team['id'])
            
            # Calcular probabilidades
            match_data = {
                'home_stats': home_stats,
                'away_stats': away_stats,
                'h2h': h2h_matches,
                'is_ht_0x0': True  # Sabemos que est√° 0-0 no HT
            }
            
            prob_over_05, prob_over_15 = self.probability_calculator.calculate_probabilities(match_data)
            
            logger.info(f"üìä Probabilidades: Over 0.5 = {prob_over_05:.1f}%, Over 1.5 = {prob_over_15:.1f}%")
            
            # Buscar odds
            odds_data = self.get_odds(fixture_id)
            
            if not odds_data:
                logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter odds")
                return
            
            over_05_odds, over_15_odds = self.extract_over_odds(odds_data)
            
            if not over_05_odds or not over_15_odds:
                logger.warning("‚ö†Ô∏è Odds Over 0.5/1.5 n√£o dispon√≠veis")
                return
            
            logger.info(f"üí∞ Odds: Over 0.5 = {over_05_odds}, Over 1.5 = {over_15_odds}")
            
            # Detectar EV+
            opportunities = self.ev_detector.detect_ev_opportunities(
                prob_over_05=prob_over_05,
                prob_over_15=prob_over_15,
                over_05_odds=over_05_odds,
                over_15_odds=over_15_odds
            )
            
            # Processar oportunidades EV+
            for opp in opportunities:
                if opp['is_ev_positive']:
                    message = self.ev_detector.format_ev_message(
                        fixture=fixture,
                        opportunity=opp
                    )
                    
                    if send_telegram_notification(message):
                        logger.info("‚úÖ Notifica√ß√£o EV+ enviada!")
                        self.notified_fixtures.add(fixture_id)
                    else:
                        logger.error("‚ùå Falha ao enviar notifica√ß√£o EV+")
                
                # Enviar notifica√ß√£o EV- se configurado
                elif Config.SEND_EV_NEGATIVE:
                    message = self.ev_detector.format_ev_negative_message(
                        fixture=fixture,
                        opportunity=opp
                    )
                    
                    send_telegram_notification(message)
                    logger.info("üìö Notifica√ß√£o EV- (educativa) enviada")
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar fixture: {e}")
    
    def run(self):
        """Executa o loop principal do bot"""
        logger.info("üöÄ Santo Graal Bot EV+ iniciado!")
        
        while True:
            try:
                # Verificar jogos pr√≥ximos (pr√≥ximas 24h)
                logger.info("‚è∞ Verificando jogos nas pr√≥ximas 24h...")
                upcoming = self.get_upcoming_fixtures(hours_ahead=24)
                logger.info(f"Encontrados {len(upcoming)} jogos pr√≥ximos")
                
                # Verificar jogos ao vivo 0-0 no HT
                logger.info("üî¥ Verificando jogos ao vivo...")
                live = self.get_live_fixtures()
                
                # Filtrar apenas jogos 0-0 no HT
                ht_0x0_fixtures = [f for f in live if self.is_halftime_0x0(f)]
                
                logger.info(f"Encontrados {len(ht_0x0_fixtures)} jogos ao vivo 0-0")
                
                # Processar jogos 0-0 no HT
                for fixture in ht_0x0_fixtures:
                    self.process_fixture(fixture)
                    time.sleep(1)  # Rate limiting
                
                # Aguardar antes do pr√≥ximo ciclo
                logger.info(f"üí§ Aguardando {Config.CHECK_INTERVAL} segundos at√© pr√≥xima verifica√ß√£o...")
                time.sleep(Config.CHECK_INTERVAL)
            
            except KeyboardInterrupt:
                logger.info("‚ö†Ô∏è Bot interrompido pelo usu√°rio")
                break
            
            except Exception as e:
                logger.error(f"‚ùå Erro no loop principal: {e}")
                time.sleep(60)  # Aguardar 1 minuto em caso de erro


# ============================================================
# Fun√ß√£o Principal
# ============================================================

def main():
    """Fun√ß√£o principal"""
    
    # Iniciar servidor HTTP em thread separada (para Render Web Service)
    health_thread = Thread(target=run_health_check_server, daemon=True)
    health_thread.start()
    logger.info(f"‚úÖ Health check endpoint ativo na porta {os.getenv('PORT', 10000)}")
    
    bot = SantoGraalBot()
    
    try:
        # Enviar mensagem de inicializa√ß√£o
        # CORRE√á√ÉO: Escape MarkdownV2 perfeito - SEM pontos decimais
        startup_message = (
            "ü§ñ *Santo Graal Bot EV\\+ Iniciado\\!*\n\n"
            f"üìä *Ligas monitoradas:* {len(Config.LEAGUES)}\n"
            f"‚ö° *EV m√≠nimo:* \\+{int(Config.MIN_EV_PERCENT)}%\n"
            f"üí∞ *Stake m√°ximo:* {int(Config.MAX_STAKE_PERCENT)}% da banca\n"
            f"üéØ *Kelly Criterion:* {int(Config.KELLY_FRACTION * 100)}% conservador\n\n"
            "‚úÖ Sistema pronto\\! Monitorando jogos 24/7"
        )
        send_telegram_notification(startup_message)
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar Telegram: {e}")
    
    # Iniciar bot
    bot.run()


if __name__ == "__main__":
    main()
