from datetime import datetime
from dateutil import tz

class MessageFormatter:
    def format_highlight_message(self, match_data):
        # Dados b√°sicos
        home_team = match_data["home_team"]
        away_team = match_data["away_team"]
        home_avg = match_data["home_avg"]
        away_avg = match_data["away_avg"]
        
        # Configura√ß√µes da liga
        config = match_data["league_config"]
        league_name = config["name"]
        min_threshold = match_data["min_threshold"]
        
        # Emojis de crit√©rio atendido
        home_emoji = "‚úÖ" if match_data["home_meets_criteria"] else ""
        away_emoji = "‚úÖ" if match_data["away_meets_criteria"] else ""
        
        # Formata√ß√£o de data/hora
        match_datetime = datetime.fromisoformat(
            match_data["match_time"].replace("Z", "+00:00")
        )
        league_tz = tz.gettz(config["timezone"])
        local_time = match_datetime.astimezone(league_tz)
        
        now_local = datetime.now(league_tz)
        if local_time.date() == now_local.date():
            day_label = "HOJE"
        else:
            day_label = local_time.strftime("%d/%m")
            
        time_str = local_time.strftime("%H:%M")
        tz_label = self._get_timezone_label(config["timezone"])
        
        # Dados hist√≥ricos da liga
        hist = config["historical_minimums"]
        peaks = config["peak_minutes"]
        
        # Construir mensagem
        message = f"""üö® JOGO EM DESTAQUE {day_label}!

‚öΩ {home_team} vs {away_team}
üïê {day_label} √†s {time_str} ({tz_label})

üìä CRIT√âRIO ATENDIDO - M√©dias √öltimos 4 Jogos:
‚Ä¢ {home_team}: {home_avg:.2f} gols/jogo {home_emoji}
‚Ä¢ {away_team}: {away_avg:.2f} gols/jogo {away_emoji}
(Pelo menos uma ‚â• {min_threshold:.2f})

üéØ MINUTOS DE PICO (M√≠nimos Hist√≥ricos):
‚Ä¢ 60': ‚â•{peaks['60']}% probabilidade
‚Ä¢ 75': ‚â•{peaks['75']}% probabilidade  
‚Ä¢ 85': ‚â•{peaks['85']}% probabilidade

üìà PADR√ïES {league_name.upper()} (M√≠nimos dos √öltimos 5 Anos):
‚Ä¢ M√©dia: ‚â•{hist['avg_goals_per_match']:.2f} gols/jogo
‚Ä¢ BTTS: ‚â•{hist['btts_rate']}% | Over 2.5: ‚â•{hist['over25_rate']}%
‚Ä¢ Over 3.5: ‚â•{hist['over35_rate']}% | 2¬∫ tempo: ‚â•{hist['second_half_share']}%

üí° Alto potencial ofensivo confirmado - fique atento!

üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M')}"""

        return message

    def _get_timezone_label(self, timezone_str):
        labels = {
            "Europe/London": "Londres", "Europe/Madrid": "Madrid", "Europe/Rome": "Roma",
            "Europe/Berlin": "Berlim", "Europe/Paris": "Paris", "Europe/Lisbon": "Lisboa",
            "Europe/Brussels": "Bruxelas", "Europe/Istanbul": "Istambul",
            "America/Sao_Paulo": "Bras√≠lia", "America/Argentina/Buenos_Aires": "Buenos Aires"
        }
        return labels.get(timezone_str, timezone_str.split("/")[-1])
